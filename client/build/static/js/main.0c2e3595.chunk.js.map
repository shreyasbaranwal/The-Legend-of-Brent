{"version":3,"sources":["Components/_AuthHelper.js","Components/AttackBar.js","Components/TitleBar.js","Components/LogIn.js","Components/SignUp.js","Screens/LogIn.js","Components/MonsterCard.js","Screens/Battle.js","Screens/CharSelect.js","App.js","serviceWorker.js","index.js"],"names":["AuthHelperMethods","login","username","password","_this","fetch","method","body","JSON","stringify","then","res","setToken","token","Promise","resolve","logout","localStorage","removeItem","loggedIn","getToken","isTokenExpired","decode","exp","Date","now","err","console","log","idToken","setItem","getItem","getConfirm","answer","url","options","headers","Accept","Content-Type","Object","objectSpread","_checkStatus","response","json","status","error","Error","statusText","React","Component","AttackBar","props","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","attackBarInitialState","react_default","a","createElement","Fragment","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","appbar","backgroundColor","TitleBar","classes","Auth","className","AppBar","position","Toolbar","Typography","variant","style","fontFamily","react_router_dom","to","color","textDecoration","paddingLeft","onClick","react_router","alert","handleLogout","LogIn","loginSuccess","changeHandler","event","_this$setState","setState","defineProperty","target","name","value","handleFormSubmit","preventDefault","catch","Grid","container","direction","justify","alignItems","padding","component","paddingBottom","Paper","Box","TextField","id","label","onChange","margin","type","Button","paddingTop","href","Components_AttackBar","SignUp","email","signUp","axios","post","data","document","backgroundImage","backgroundRepeat","height","align","marginLeft","item","xs","LogInScreen","Components_LogIn","createStyles","card","width","media","cardB","MonsterCard","concat","shake","Card","CardActionArea","CardMedia","image","img","CardContent","gutterBottom","class","smallAttack","bigAttack","specialAttack","health","CardActions","BattleScreen","monsterShake","rubberBand","wobble","prevProps","_this2","_this$props$globalSta","globalState","monster","character","prevMonster","prevCharacter","setTimeout","_this3","_this$props$globalSta2","_this$state","backgroundPosition","Container","maxWidth","key","size","handleSmallAttackMonster","shakeMonster","CharSelect","players","map","Player","chooseCharacter","App","enemyAttack","valueEnemyAttack","parseInt","_handleLogout","handleAttackMonster","handleBigAttackMonster","handleSpecialAttackMonster","monsters","Math","floor","random","length","counter","enemyInterval","setInterval","clearInterval","exact","path","render","Screens_CharSelect","Battle","Boolean","window","location","hostname","match","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c2e3595.chunk.js","sourcesContent":["import React from \"react\";\nimport decode from \"jwt-decode\";\nimport { Redirect } from \"react-router-dom\"\n\nclass AuthHelperMethods extends React.Component {\n  login = (username, password) =>\n    this.fetch(\"/user/login\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        username,\n        password\n      })\n    }).then(res => {\n      this.setToken(res.token);\n      return Promise.resolve(res);\n    });\n\n  logout = () => {\n    localStorage.removeItem(\"id_token\");\n  };\n\n  loggedIn = () => {\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  };\n\n  isTokenExpired = token => {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      console.log(\"expired check failed! Line 42: AuthService.js\");\n      return false;\n    }\n  };\n\n  setToken = idToken => {\n    localStorage.setItem(\"id_token\", idToken);\n    console.log(\"id token has been set\");\n  };\n\n  getToken = () => {\n    console.log(\"getting id token\");\n    return localStorage.getItem(\"id_token\");\n  };\n\n  getConfirm = () => {\n    let answer = decode(this.getToken());\n    console.log(\"Recieved answer!\");\n    return answer;\n  };\n\n  fetch = (url, options) => {\n    const headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    };\n    if (this.loggedIn()) {\n      headers[\"Authorization\"] = \"Bearer \" + this.getToken();\n    }\n    return fetch(url, {\n      headers,\n      ...options\n    })\n      .then(this._checkStatus)\n      .then(response => response.json());\n  };\n\n  _checkStatus = response => {\n    if (response.status >= 200 && response.status < 300) {\n      // Success status lies between 200 to 300\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  };\n}\n\nexport default AuthHelperMethods;\n","import React from 'react';\n\n\n//Hey guys - this is my pet project - doesn't have to be implemented if we can't get to it,\n//but I thought this would make the game a lot more fun -- the idea here would be to create a\n//css animated progress bar where the color inside the bar would move to the left and right.\n//\nclass AttackBar extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      attackBarInitialState: 0\n    }\n  }\n\n  render() {\n\n    return(\n      <>\n\n      </>\n    )\n\n  }\n}\n\nexport default AttackBar","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AuthHelperMethods from \"./_AuthHelper\";\nimport { BrowserRouter as Router, Link, Redirect } from \"react-router-dom\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  },\n  appbar: {\n    backgroundColor: \"black\"\n  }\n}));\n\nexport default function TitleBar() {\n  const classes = useStyles();\n\n  const handleLogout = () => {\n    if (!Auth.loggedIn()) {\n      alert(\"You are not currently logged in.\");\n    } else {\n      Auth.logout();\n      return <Redirect to=\"/\" />;\n    }\n  };\n\n  const Auth = new AuthHelperMethods();\n\n  return (\n    <div className={classes.root}>\n      <AppBar className={classes.appbar} position=\"static\">\n        <Toolbar>\n          {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n          </IconButton> */}\n\n          <Typography\n            variant=\"h6\"\n            className={classes.title}\n            style={{\n              fontFamily: \"Merienda, cursive\"\n            }}\n          >\n            <Link\n              to=\"/\"\n              color=\"inherit\"\n              style={{\n                textDecoration: \"none\",\n                color: \"white\",\n                paddingLeft: \"20px\"\n              }}\n            >\n              THE LEGEND OF BRENT\n            </Link>\n          </Typography>\n          <Link\n            to=\"/CharSelect\"\n            color=\"inherit\"\n            style={{\n              fontFamily: \"Merienda, cursive\",\n              textDecoration: \"none\",\n              color: \"white\"\n            }}\n            onClick={() => {\n              // this.props.deleteCharacter();\n            }}\n          >\n            CHARACTER SELECTION\n          </Link>\n          <Link\n            to=\"/\"\n            color=\"inherit\"\n            style={{\n              fontFamily: \"Merienda, cursive\",\n              textDecoration: \"none\",\n              color: \"white\",\n              paddingLeft: \"20px\"\n            }}\n            onClick={() => {\n              handleLogout();\n            }}\n          >\n            LOGOUT\n          </Link>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport { Typography, Grid } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport AuthHelperMethods from \"../Components/_AuthHelper\";\nimport AttackBar from '../Components/AttackBar'\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\nimport TitleBar from \"./TitleBar\";\n\nclass LogIn extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  Auth = new AuthHelperMethods();\n\n  state = {\n    username: \"\",\n    password: \"\",\n    loginSuccess: false\n  };\n\n  changeHandler = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n      [event.target.password]: event.target.value\n    });\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    this.Auth.login(this.state.username, this.state.password)\n      .then(response => {\n        if (response.status === 400) {\n          return alert(\"Sorry those credentials don't exist!\");\n        }\n        this.setState({ loginSuccess: true });\n      })\n      .catch(err => {\n        alert(err);\n      });\n  };\n\n  render() {\n    if (this.state.loginSuccess) {\n      return <Redirect to=\"/CharSelect\" />;\n    }\n    return (\n      <>\n        <TitleBar />\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"space-evenly\"\n          alignItems=\"flex-start\"\n          style={{\n            padding: \"20px\"\n          }}\n        >\n          <Typography\n            variant=\"h4\"\n            component=\"h4\"\n            style={{\n              color: \"white\",\n              fontFamily: \"Merienda, cursive\",\n              paddingBottom: \"20px\"\n            }}\n          >\n            Log In To Play Now!\n          </Typography>\n          <Paper\n            style={{\n              backgroundColor: \"#f5f5f5\"\n            }}\n          >\n            <Box style={{ padding: \"20px\" }}\n            >\n              <Typography\n                variant=\"h6\"\n                component=\"h6\"\n                style={{\n                  fontFamily: \"Merienda, cursive\"\n                }}\n              >\n                Log In Below\n              </Typography>\n              <TextField\n                id=\"outlined-name\"\n                label=\"Name\"\n                name=\"username\"\n                onChange={this.changeHandler}\n                margin=\"normal\"\n                variant=\"outlined\"\n              />\n              <TextField\n                id=\"outlined-password-input\"\n                name=\"password\"\n                label=\"Password\"\n                onChange={this.changeHandler}\n                type=\"password\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                style={{\n                  paddingLeft: \"3px\"\n                }}\n              />\n            </Box>\n            <Box component=\"span\" style={{ padding: \"20px\" }} >\n              <Button\n              variant=\"contained\"\n              color=\"primary\"\n              id=\"loginButton\"\n              onClick={this.handleFormSubmit}\n              style={{ fontFamily: \"Merienda, cursive\" }}\n              >\n              Login\n              </Button>\n\n              <Typography\n                style={{\n                  paddingTop: \"10px\",\n                  paddingLeft: \"20px\",\n                  fontFamily: \"Merienda, cursive\"\n                }}\n              >\n                Don't have an account?\n                <a href=\"/signup\"> Sign up here</a>\n              </Typography>\n              <AttackBar />\n            </Box>\n          </Paper>\n        </Grid>\n      </>\n    );\n  }\n}\n\nexport default LogIn;\n","import React, { Component } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport { Typography, Grid } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { __values } from \"tslib\";\nimport axios from \"axios\";\nimport {\n  Redirect,\n} from \"react-router-dom\";\nimport TitleBar from \"./TitleBar\";\n\nclass SignUp extends Component {\n  state = {\n    name: \"\",\n    password: \"\",\n    email: \"\"\n  };\n\n  changeHandler = event => {\n    this.setState({\n      [event.target.name]: event.target.value,\n      [event.target.password]: event.target.value,\n      [event.target.email]: event.target.value\n    });\n  };\n\n  signUp = event => { // our signup method that uses axios to pass a username, password and e-mail to the db\n    event.preventDefault();\n    axios\n      .post(\"/user/signup\", {\n        username: this.state.name,\n        password: this.state.password,\n        email: this.state.email\n      })\n      .then(res => {\n        console.log(res);\n        if (res.data) {\n          alert(`Your account was created!`);\n          console.log(res.data);\n          return <Redirect to=\"/\" />;\n        } else {\n          console.error(\"signup error\");\n        }\n      })\n      .catch(error => {\n        console.log(\"sign up server error: \");\n        console.error(error);\n      });\n  };\n\n  render() {\n    document.body.style.backgroundImage = \"url(images/monster.jpg\";\n    document.body.style.backgroundRepeat = \"no-repeat\";\n    document.body.style.height = \"100%\";\n    return (\n      <>\n        <TitleBar />\n        <Typography\n            variant=\"h3\"\n            component=\"h3\"\n            align=\"left\"\n            style={{\n              margin: 15,\n              paddingBottom: \"20px\",\n              fontFamily: \"Merienda, cursive\",\n              color: 'maroon'\n            }}\n          >\n            Sign Up To Play Now!\n          </Typography>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"space-evenly\"\n          alignItems=\"flex-start\"\n        >\n          <Paper\n            style={{\n              padding: 20,\n              backgroundColor: \"whitesmoke\",\n              marginLeft: \"4rem\"\n            }}\n          >\n            <Box>\n              <Typography\n                variant=\"h6\"\n                component=\"h6\"\n                style={{\n                  fontFamily: \"Merienda, cursive\", color: \"maroon\"\n                }}\n              >\n                Please Fill Out The Fields Below\n              </Typography>\n              <Grid item xs={10}>\n                <TextField\n                  id=\"outlined-name\"\n                  name=\"name\"\n                  label=\"Name\"\n                  onChange={this.changeHandler}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n              <Grid item xs={10}>\n                <TextField\n                  id=\"outlined-email-input\"\n                  label=\"E-mail\"\n                  name=\"email\"\n                  onChange={this.changeHandler}\n                  type=\"email\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n              <Grid item xs={10}>\n                <TextField\n                  id=\"outlined-password-input\"\n                  label=\"Password\"\n                  name=\"password\"\n                  onChange={this.changeHandler}\n                  type=\"password\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                />\n              </Grid>\n            </Box>\n            <Box>\n              <Button\n                variant=\"contained\"\n                style={{ backgroundColor: 'maroon', color: 'white' }}\n                onClick={this.signUp}\n              >\n                Sign-Up\n              </Button>\n            </Box>\n          </Paper>\n        </Grid>\n      </>\n    );\n  }\n}\nexport default SignUp;\n","import React, { Component } from \"react\";\nimport LogIn from \"../Components/LogIn\";\nimport SignUp from \"../Components/SignUp\";\nimport TitleBar from \"../Components/TitleBar\";\n\nclass LogInScreen extends Component {\n  render() {\n    document.body.style.backgroundImage = \"url(images/rain.jpg\";\n    document.body.style.backgroundRepeat = \"no-repeat\";\n    document.body.style.height = \"100%\";\n\n    return (\n      <>\n        <LogIn />\n      </>\n    );\n  }\n}\n\nexport default LogInScreen;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles(\n  createStyles({\n    card: {\n      width: 250,\n\n      margin: 30\n    },\n    media: {\n      height: 350\n    },\n    cardB: {\n      width: 300,\n      margin: 30,\n      backgroundColor: 'red',\n    }\n  })\n);\n\nexport default function MonsterCard(props) {\n  const classes = useStyles();\n  console.log(`Monster card props.shake: ${props.shake}`);\n\n  return (\n    <>\n      <Card className={props.shake ? `${classes.cardB}` : `${classes.card}`}>\n        <CardActionArea>\n          <CardMedia\n            className={`${classes.media}`}\n            image={props.img}\n            name={props.name}\n          />\n          <CardContent>\n            <Typography\n              gutterBottom\n              variant=\"h5\"\n              component=\"h5\"\n              style={{\n                fontFamily: \"Merienda, cursive\"\n              }}\n            >\n              {props.name}\n            </Typography>\n\n            <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\">\n              <Grid direction=\"column\">\n                <Typography\n                  style={{\n                    fontFamily: \"Merienda, cursive\"\n                  }}\n                >\n                  {\" \"}\n                  Class: {props.class}\n                </Typography>\n\n                <Typography\n                  style={{\n                    fontFamily: \"Merienda, cursive\"\n                  }}\n                >\n                  Small Attack: {props.smallAttack}\n                </Typography>\n                <Typography\n                  style={{\n                    fontFamily: \"Merienda, cursive\"\n                  }}\n                >\n                  Big Attack: {props.bigAttack}\n                </Typography>\n                <Typography\n                  style={{\n                    fontFamily: \"Merienda, cursive\"\n                  }}\n                >\n                  {\" \"}\n                  Special Attack: {props.specialAttack}\n                </Typography>\n                <Typography\n                  style={{\n                    fontFamily: \"Merienda, cursive\"\n                  }}\n                >\n                  {\" \"}\n                  Health: {props.health }\n                </Typography>\n              </Grid>\n              <CardActions>\n                {/* <Button size=\"small\" color=\"primary\" variant=\"contained\">\n                  Select\n                </Button>\n                <Button size=\"small\" color=\"primary\">\n                  Share\n                </Button> */}\n              </CardActions>\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    </>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Grid, Container, Box } from \"@material-ui/core/\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MonsterCard from \"../Components/MonsterCard\";\nimport Button from \"@material-ui/core/Button\";\nimport TitleBar from \"../Components/TitleBar\";\nimport { BrowserRouter as Router, Link, Redirect } from \"react-router-dom\";\n// import players from \"../data/Player.json\";\n// import monster from \"../data/Monster.json\";\n// import SpringButton from \"../Components/SpringButton\";\n// import { shake, rubberBand, wobble } from \"animate.css\";\n\nconst ATTACK_LENGTH = 150\n\nclass BattleScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shake: false,\n      monsterShake: false,\n      rubberBand: false,\n      wobble: false\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { monster, character } = this.props.globalState;\n    const prevMonster = prevProps.globalState.monster;\n    const prevCharacter = prevProps.globalState.character;\n    if (monster && character) { // means battle is going on\n      if (character.health !== prevCharacter.health) {\n        console.log('character health changed')\n        // shake true to trigger animation, after ATTACK_LENGTH,\n        // card goes back to normal state\n        this.setState({shake: true}, () => {\n          setTimeout(() => this.setState({ shake: false }), ATTACK_LENGTH);\n        });\n      }\n      if (monster.health !== prevMonster.health) {\n        console.log('monster health changed');\n        this.setState({monsterShake: true}, () => {\n          setTimeout(() => this.setState({ monsterShake: false }), ATTACK_LENGTH);\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      shake: false,\n      monsterShake: false,\n    })\n  }\n\n  render() {\n    const style1 = {\n      paddingTop: \"15px\"\n    };\n    const { character, monster } = this.props.globalState;\n    const { shake, monsterShake } = this.state;\n\n    document.body.style.backgroundImage = \"url('images/battle.jpg')\";\n    document.body.style.backgroundRepeat = \"repeat-y\";\n    document.body.style.backgroundPosition = \"center \";\n\n    return (\n      <>\n        <TitleBar />\n      <Container maxWidth=\"lg\">\n        <Grid\n          style={style1}\n          direction=\"row\"\n          alignItems=\"space-evenly\"\n          justify=\"center\"\n          container\n          spacing={5}\n        >\n            <>\n            {\n              character && (\n              <Box>\n                <MonsterCard\n                  key={character.id}\n                  id={character.id}\n                  class={character.class}\n                  name={character.name}\n                  img={character.img}\n                  health={character.health}\n                  smallAttack={character.smallAttack}\n                  bigAttack={character.bigAttack}\n                  specialAttack={character.specialAttack}\n                  shake={shake}\n                />\n                <Grid container direction=\"column\" justify=\"space-between\">\n                  <Box>\n                    <Typography>\n                      <Button\n                        size=\"medium\"\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={() => {\n                          this.props.handleSmallAttackMonster(character.smallAttack);\n                          this.setState({shakeMonster: true});\n                        }}\n                      >\n                        Small Attack\n                      </Button>\n                      <Button\n                        size=\"medium\"\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={() => {\n                          this.props.handleSmallAttackMonster(character.bigAttack);\n                          this.setState({shakeMonster: true});\n                        }}\n                      >\n                        Big Attack\n                      </Button>\n                    </Typography>\n                  </Box>\n                </Grid>\n              </Box>\n              )\n            }\n          </>\n          {\n            monster && (\n            <Box>\n              <MonsterCard\n                key={monster.id}\n                id={monster.id}\n                class={monster.class}\n                name={monster.name}\n                img={monster.img}\n                health={monster.health}\n                smallAttack={monster.smallAttack}\n                bigAttack={monster.bigAttack}\n                specialAttack={monster.specialAttack}\n                shake={monsterShake}\n              />\n            </Box>\n          )}\n        </Grid>\n        </Container>\n        </>\n    );\n  }\n}\n\nexport default BattleScreen;\n","import React, { Component } from \"react\";\nimport { Grid, Container, Box } from \"@material-ui/core/\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MonsterCard from \"../Components/MonsterCard\";\nimport Button from \"@material-ui/core/Button\";\nimport players from \"../data/Player.json\";\nimport BattleScreen from \"./Battle\";\nimport { Redirect } from \"react-router-dom\";\nimport TitleBar from \"../Components/TitleBar\";\n\nclass CharSelect extends Component {\n  constructor(props) {\n    super(props);\n    // this.state = {\n    //   selectedId: -1,\n    //   selectedPlayer: {}\n    // };\n  }\n\n  // chooseCharacter(pId) {\n  //   this.setState({\n  //     selectedId: pId - 1,\n  //     selectedPlayer: players[pId - 1]\n  //   });\n  // }\n  render() {\n    const style1 = {\n      paddingTop: \"15px\"\n    };\n    // const { selectedId, selectedPlayer } = this.state;\n\n    document.body.style.backgroundImage = \"url('images/bluesky.jpg')\";\n    document.body.style.backgroundRepeat = \"repeat-y\";\n    // document.body.style.height = \"100vh\";\n\n    if (this.props.globalState && this.props.globalState.character) {\n      return <Redirect to=\"/BattleScreen\" />;\n    }\n\n    // if (selectedId === -1) {\n    return (\n      <>\n        <TitleBar />\n        <Container maxWidth=\"lg\">\n          <Grid\n            style={style1}\n            direction=\"row\"\n            alignItems=\"center\"\n            justify=\"flex-end\"\n            container\n            spacing={5}\n          >\n            {players.map(Player => (\n              <>\n                <Box>\n                  <MonsterCard\n                    key={Player.id}\n                    id={Player.id}\n                    class={Player.class}\n                    name={Player.name}\n                    img={Player.img}\n                    health={Player.health}\n                    smallAttack={Player.smallAttack}\n                    bigAttack={Player.bigAttack}\n                    specialAttack={Player.specialAttack}\n                  />\n                  <Button\n                    size=\"small\"\n                    color=\"primary\"\n                    variant=\"contained\"\n                    style={{\n                      marginLeft: \"4rem\"\n                    }}\n                    onClick={() => {\n                      // this.props.chooseCharacter(Player);\n                      this.props.chooseCharacter(Player);\n                    }}\n                  >\n                    {`Choose ${Player.name}`}\n                  </Button>\n                </Box>\n              </>\n            ))}\n          </Grid>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default CharSelect;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport LogInScreen from \"./Screens/LogIn\";\nimport TitleBar from \"./Components/TitleBar\";\nimport CharSelect from \"./Screens/CharSelect\";\nimport AuthHelperMethods from \"./Components/_AuthHelper\";\nimport withAuth from \"./Components/withAuth\";\nimport LogIn from \"./Screens/LogIn\";\nimport SignUp from \"./Components/SignUp\";\nimport BattleScreen from \"./Screens/Battle\";\nimport monsters from \"./data/Monster.json\";\nimport { Redirect } from \"react-router-dom\";\n\n\nconst ENEMY_TIMER = 3000;\nconst ENEMY_TIMER_BIG = 1000;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      character: null,\n      monster: monsters[Math.floor(Math.random() * monsters.length)],\n      counter: 0\n    };\n    this.enemyInterval = \"\";\n  }\n\n  enemyAttack = () => {\n    const { character, monster } = this.state;\n    const valueEnemyAttack = parseInt(monster.smallAttack);\n\n    if (character && character.health >= 0) {\n      this.setState({\n        character: {\n          ...character,\n          health: parseInt(character.health) - valueEnemyAttack\n        }\n      });\n    }\n  };\n\n  handleSmallAttackMonster = value => {\n    this.setState({\n      monster: {\n        ...this.state.monster,\n\n        health: this.state.monster.health - value\n      }\n    });\n    if (this.state.monster.health <= 0) {\n      alert(`You defeated ${this.state.monster.name}! You won!`);\n\n      this.setState({\n        monster: \"\",\n        character: \"\"\n      });\n    }\n  };\n\n  componentDidMount() {\n    this.enemyInterval = setInterval(this.enemyAttack, ENEMY_TIMER_BIG);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.enemyInterval);\n  }\n\n  componentDidUpdate() {\n    // log character and monster\n    console.log(this.state.character);\n    console.log(this.state.monster);\n    if (this.state.character.health <= 0) {\n      alert(`${this.state.monster.name} has defeated you!`);\n     \n      this.setState({\n        monster: \"\",\n        character: \"\"\n      });\n    }\n  }\n\n  Auth = new AuthHelperMethods();\n\n  _handleLogout = () => {\n    this.Auth.logout();\n    alert(\"You have successfully logged out\");\n  };\n\n  chooseCharacter = value => {\n    this.setState({\n      character: value\n    });\n  };\n\n  handleAttackMonster = value => {\n    this.setState({\n      monster: {\n        ...this.state.monster,\n        health: this.state.monster.health - value\n      }\n    });\n  };\n\n  handleBigAttackMonster = value => {\n    this.setState({\n      monster: {\n        ...this.state.monster,\n        health: this.state.monster.health - value\n      }\n    });\n  };\n\n  handleSpecialAttackMonster = value => {\n    this.setState({\n      monster: {\n        ...this.state.monster,\n        health: this.state.monster.health - value\n      }\n    });\n  };\n\n  render() {\n    // if (this.state.character.health <= 0) {\n    //   alert(\"it worked\");\n    // }\n    return (\n      <>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={LogInScreen} />\n            <Route exact path=\"/signup\" component={SignUp} />\n            <Route\n              path=\"/CharSelect\"\n              render={() => (\n                <CharSelect\n                  chooseCharacter={this.chooseCharacter}\n                  globalState={this.state}\n                />\n              )}\n            />\n            <Route\n              path=\"/BattleScreen\"\n              render={() => (\n                <BattleScreen\n                  handleSmallAttackMonster={this.handleSmallAttackMonster}\n                  handleBigAttackMonster={this.handleBigAttackMonster}\n                  handleSpecialAttackMonster={this.handleSpecialAttackMonster}\n                  globalState={this.state}\n                />\n              )}\n            />\n          </Switch>\n        </Router>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}